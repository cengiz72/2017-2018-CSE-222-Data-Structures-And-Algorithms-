package com.company;

public class Main {

    public static void main(String[] args) {
        Part2<MustBeComparable<Integer>> tree2 = new Part2<>();
        Part1<String> tree = new Part1<>("william");
        Part1<String> tree1 = new Part1<>("george");
        System.out.println("add method used the level order search:");
        System.out.println();
        tree.add("william","jack",0);
        tree.add("jack","victory",0);
        tree.add("william","ariana",0);
        tree.add("william","rebeca",0);
        tree.add("rebeca","henry",0);
        tree.add("rebeca","fiona",0);
        tree.add("jack","adam",0);
        tree.add("victory","luccia",0);
        tree.add("victory","raymen",0);
        tree.add("ariana","ella",0);
        tree.add("ariana","carter",0);
        tree.add("adam","david",0);
        System.out.println("Result  of add(logan,hercule,0) is false because logan is not present in tree.");
        System.out.printf("Result of add : %s \n",tree.add("logan","hercule",0));
        System.out.println();
        System.out.println("add method used the post order search:");
        tree1.add("george","jaxon",1);
        tree1.add("jaxon","hazel",1);
        tree1.add("george","audrey",1);
        tree1.add("george","alice",1);
        tree1.add("alice","hunter",1);
        tree1.add("alice","hailey",1);
        tree1.add("jaxon","hudson",1);
        tree1.add("hazel","willow",1);
        tree1.add("hazel","parker",1);
        tree1.add("audrey","piper",1);
        tree1.add("audrey","robert",1);
        System.out.println();
        System.out.println("Result  of add(tyler,jane,1) is false because tyler is not present in tree.");
        System.out.printf("Result of add : %s \n",tree.add("tyler","jane",1));
        System.out.println();
        System.out.println("level order search:");
        System.out.println("search fiona on the tree,return reference of fiona");
        BinaryTree.Node node = tree.levelOrderSearch("fiona",1);
        System.out.println();
        System.out.printf("Result of search : %s \n",node);
        System.out.println();
        System.out.println("search justin on the tree,return null");
        node = tree.levelOrderSearch("justin",1);
        System.out.println();
        System.out.printf("Result of search : %s \n",node);
        System.out.println();
        System.out.println("post order search :");
        System.out.println("search jaxon on the tree,return reference of jaxon");
        node = tree1.postOrderSearch("jaxon",1);
        System.out.println();
        System.out.printf("Result of search : %s \n",node);
        System.out.println();
        System.out.println("search mike on the tree,return null");
        node = tree1.postOrderSearch("mike",1);
        System.out.println();
        System.out.printf("Result of search : %s \n",node);
        System.out.println();

        MustBeComparable<Integer> A = new MustBeComparable<>(10,20,30);
        MustBeComparable<Integer> B = new MustBeComparable<>(11,25,31);
        MustBeComparable<Integer> C = new MustBeComparable<>(9,18,40);
        MustBeComparable<Integer> D = new MustBeComparable<>(-9,-96,0);
        MustBeComparable<Integer> E = new MustBeComparable<>(7,15,33);
        MustBeComparable<Integer> F = new MustBeComparable<>(32,52,23);
        MustBeComparable<Integer> G = new MustBeComparable<>(110,20,45);
        MustBeComparable<Integer> H = new MustBeComparable<>(0,23,37);
        MustBeComparable<Integer> K = new MustBeComparable<>(8,17,99);
        System.out.println("Part 2 : ");
        System.out.println("Result of add method: ");
        tree2.add(A);
        tree2.add(B);
        tree2.add(C);
        tree2.add(D);
        tree2.add(E);
        tree2.add(F);
        tree2.add(G);
        tree2.add(H);
        tree2.add(K);
        System.out.println();
        System.out.println("Result of find method : ");
        System.out.println("find point (110,20,45) on the tree : ");
        System.out.printf("Result of find : %s \n",tree2.find(G));
        System.out.println("find point (9,30,45) on the tree : ");
        System.out.printf("Result of find : %s \n",tree2.find(new MustBeComparable<>(9,30,45)));
        System.out.println("Result of contains method : ");
        System.out.println("find point (32,52,23) on the tree : ");
        System.out.printf("Result of contains : %s \n",tree2.contains(G));
        System.out.println("find point (0,70,-5) on the tree : ");
        System.out.printf("Result of contains : %s \n",tree2.contains(new MustBeComparable<>(0,70,-5)));
        System.out.println("Result of delete method : ");
        System.out.println("delete point (110,20,45) on the tree : ");
        System.out.printf("Result of delete : %s \n",tree2.delete(G));
        System.out.println("delete point (110,20,45) on the tree ,return null" +
                          " because it does not exist such point on tree anymore: ");
        System.out.printf("Result of delete : %s \n",tree2.delete(G));
        System.out.println("Result of remove method : ");
        System.out.println("remove point (32,52,23) on the tree : ");
        System.out.printf("Result of remove : %s \n",tree2.remove(F));
        System.out.println("remove point (32,52,23) on the tree : ");
        System.out.printf("Result of remove : %s \n",tree2.remove(F));
        System.out.println("The result of pre order traverse : ");
        System.out.println(tree.toString());
    }
}
